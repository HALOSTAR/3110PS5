open Sequence
open Util

type profile = {
  firstname : string;
  lastname : string;
  sex : string;
  age : int;
  lo_agepref : int;
  hi_agepref : int;
  profession : string;
  has_children : bool;
  wants_children : bool;
  leisure : string;
  drinks : bool;
  smokes : bool;
  music : string;
  orientation : string;
  build : string;
  height : string
}

let convert (p : string) : profile =
  let s = String.concat " " (Str.split (Str.regexp_string "@") p) in
  Scanf.sscanf s "%s@ %s@ %s@ %d %d %d %s@ %B %B %s@ %B %B %s@ %s@ %s@ %s"
  (fun firstname lastname sex age lo_agepref hi_agepref profession has_children
       wants_children leisure drinks smokes music orientation build height ->
   { firstname = firstname;
     lastname = lastname;
     sex = sex;
     age = age;
     lo_agepref = lo_agepref;
     hi_agepref = hi_agepref;
     profession = profession;
     has_children = has_children;
     wants_children = wants_children;
     leisure = leisure;
     drinks = drinks;
     smokes = smokes;
     music = music;
     orientation = orientation;
     build = build;
     height = height
   })

let print_profile ({
     firstname = firstname;
     lastname = lastname;
     sex = sex;
     age = age;
     lo_agepref = lo_agepref;
     hi_agepref = hi_agepref;
     profession = profession;
     has_children = has_children;
     wants_children = wants_children;
     leisure = leisure;
     drinks = drinks;
     smokes = smokes;
     music = music;
     orientation = orientation;
     build = build;
     height = height } : profile) : unit =
  Printf.printf "%s %s\n" firstname lastname;
  Printf.printf "  sex: %s  age: %d  profession: %s\n" sex age profession;
  Printf.printf "  %s  %s\n" (if drinks then "social drinker" else "nondrinker") (if smokes then "smoker" else "nonsmoker");
  Printf.printf "  %s  %s\n"
    (if has_children then "has children" else "no children")
    (if wants_children then "wants children" else "does not want children");
  Printf.printf "  prefers a %s partner between the ages of %d and %d\n"
    (if (orientation="straight" && sex="F") || (orientation = "gay/lesbian" && sex="M") then "male" else "female")
    lo_agepref hi_agepref;
  Printf.printf "  likes %s music and %s\n" music leisure


let print_matches (n : string) ((p, ps) : profile * (float * profile) list) : unit =
  print_string "------------------------------\nClient: ";
  print_profile p;
  Printf.printf "\n%s best matches:\n" n;
  List.iter (fun (bci, profile) ->
    Printf.printf "------------------------------\nCompatibility index: %f\n" bci; print_profile profile) ps;
  print_endline ""


(* apm computes the potential love of your life.  The filename of a file
 * containing candidate profiles is in location 0 of the given array.
 * The number of matches desired is in location 1.  The first and last name
 * of the (human) client are in location 2 and 3, respectively.  The client's
 * profile must be in the profiles file.  Results are output to stdout. *)

let split_lines = Str.split (Str.regexp "[\n]+")

let getAll lines = List.fold_left (fun a x -> (convert x)::a ) [] lines

let ageScore p1 p2 = if p1.age <= p2.hi_agepref && p1.age >= p2.lo_agepref && 
                        p2.age <= p1.hi_agepref && p2.age >= p1.lo_agepref then
                            0.1 else 0.0

let proScore p1 p2 = if not (p1.profession = p2.profession) then 0.1 else 0.0

let kidScore p1 p2 = if (p1.has_children && p2.wants_children) ||
(p2.has_children && p1.wants_children)
                    then 0.1 else 0.0

let leisureScore p1 p2 = if p1.leisure = p2.leisure then 0.1 else 0.0

let drinkScore p1 p2 = if p1.drinks = p2.drinks then 0.1 else 0.0

let smokeScore p1 p2 = if p1.smokes = p2.smokes then 0.1 else 0.0

let musicScore p1 p2 = if p1.music = p2.music then 0.1 else 0.0

let buildScore p1 p2 = match ((p1.sex, p2.sex), (p1.build, p2.build)) with
    |(("M","M"),(b1,b2)) -> if b1 = b2 then 0.2 else 0.0
    |(("F","M"),(b1,b2)) -> if not (b1 = b2) then 0.1 else 0.0
    |(("M","F"),(b1,b2)) -> if not (b1 = b2) then 0.1 else 0.0
    |(("F","F"),(b1,b2)) -> if (b1 = b2) then 0.2 else 0.0
        
let heightScore p1 p2 = match ((p1.sex, p2.sex), (p1.build, p2.build)) with
    |(("M","M"),(b1,b2)) -> if b1 = b2 then 0.1 else 0.0
    |(("F","M"),(b1,b2)) -> if not (b1 = b2) then 0.1 else 0.0
    |(("M","F"),(b1,b2)) -> if not (b1 = b2) then 0.1 else 0.0
    |(("F","F"),(b1,b2)) -> if (b1 = b2) then 0.1 else 0.0



let calc p1 p2 = 
    let sum = 0.0 in 
    if p1.orientation = "straight" && p2.orientation = "straight" && not (p1.sex = p2.sex) then 
        let sum = sum +. ageScore p1 p2 in
        let sum = sum +. proScore p1 p2 in
        let sum = sum +. kidScore p1 p2 in
        let sum = sum +. leisureScore p1 p2 in 
        let sum = sum +. drinkScore p1 p2 in 
        let sum = sum +. smokeScore p1 p2 in
        let sum = sum +. musicScore p1 p2 in
        let sum = sum +. buildScore p1 p2 in 
        sum +. heightScore p1 p2 else if 
            p1.orientation = "gay/lesbian" && p2.orientation ="gay/lesbian" && (p1.sex = p2.sex) 
        then let sum = sum +. ageScore p1 p2 in
        let sum = sum +. proScore p1 p2 in
        let sum = sum +. kidScore p1 p2 in
        let sum = sum +. leisureScore p1 p2 in 
        let sum = sum +. drinkScore p1 p2 in 
        let sum = sum +. smokeScore p1 p2 in
        let sum = sum +. musicScore p1 p2 in
        let sum = sum +. buildScore p1 p2 in 
        sum +. heightScore p1 p2 else 0.0
        

(*let cmp (s1,n1) (s2,n2) = if s1 < s2 then -1 else if s1 = s2 then 0 else 1*)
    
let dmmy = { 
  firstname = "";
  lastname = "";
  sex = "";
  age = 0;
  lo_agepref = 0 ;
  hi_agepref = 0;
  profession = "";
  has_children =false;
  wants_children =false;
  leisure = "";
  drinks = false;
  smokes =false;
  music = "";
  orientation = "";
  build = "";
  height =""
   }

let cmp a b = let (sc1, x1) = a and (sc2,x2) = b in if (sc1 > sc2 ) then -1 else 
    if (sc1=sc2 ) then 0 else 1

(* the plist should filter out the p him/herself*)
let matchH n p plist : (float*profile) list = 
    let resm = (map (fun x -> (calc p x, x)) plist) in
    let n_plus  = Array.make (n+1) (-1.0,dmmy) in
    let bucket = Array.make (length plist) (-1.0, dmmy) in
    for i = 0 to (length plist)-1 do 
        bucket.(i) <- nth resm i;
    done;
    Array.sort cmp bucket;
    let result = Array.make n (-1.0,dmmy) in
    for i = 0 to n-1 do 
        result.(i) <- bucket.(i);
    done;
    (Array.to_list result)

let matchme (args : string array) : unit = 
    let file = args.(0) in 
    let n = args.(1) in
    let first = args.(2) in
    let last = args.(3) in
    let fl = read_whole_file file in
    let lines = split_lines fl in
    let pros = getAll lines in 
    let plist = List.filter (fun x -> not ((x.firstname = first) && (x.lastname =
        last))) pros in
    let plis = List.fold_left (fun a x -> cons x a) (empty()) plist in
    let p =  List.filter (fun x -> ((x.firstname = first) && (x.lastname =
        last))) pros in
    if List.length p = 0 then failwith "Profile not found" else 
       let p = List.hd p in 
       let r = (n, (p, matchH (int_of_string n) p plis)) in
       print_matches (first^" "^last) (snd r);

